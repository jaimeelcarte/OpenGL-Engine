#version 430 core
#extension GL_ARB_compute_shader : enable
#extension FL_ARB_shader_storage_buffer_object : enable

layout(std140, binding = 4) buffer Pos
{
	vec4 Positions[];	// array of structures
};

layout(std140, binding = 5) buffer Vel
{
	vec4 Velocities[];	// array of structures
};

layout(std140, binding = 6) buffer Col
{
	vec4 Colors[];	// array of structures
};

layout(std140, binding = 7) buffer PrevPos
{
	vec4 PrevPositions[];	// array of structures
};

layout(std140, binding = 8) buffer Rank
{ 
	uint Ranks[];
};

layout (local_size_x = 128, local_size_y = 1, local_size_z = 1) in;

uniform vec3 cameraPos;
uniform int numParticles;

void main()
{
	float pI;
	float pJ;
	
	for (int i = 1; i < numParticles; ++i)
	{
		pI = distance(cameraPos, Positions[i].xyz);
		for (int j = 0; j < i; j++){
			pJ = distance(cameraPos, Positions[j].xyz);
			if (pI <= pJ) 
				Ranks[j] += 1;
			else 
				Ranks[i] += 1;
		}	
	}

	vec4[] AuxPos;
	vec4[] AuxPrevPos;
	vec4[] AuxVel;
	vec4[] AuxColors;

	for (int i = 0; i < numParticles; i++){
		AuxPos[Ranks[i]] = Positions[i];
		AuxPrevPos[Ranks[i]] = PrevPositions[i];
		AuxVel[Ranks[i]] = Velocities[i];
		AuxColors[Ranks[i]] = Colors[i];
	}
	for (int i = 0; i < numParticles; i++){
		Positions[i] = AuxPos[i];
		PrevPositions[i] = AuxPrevPos[i];
		Velocities[i] = AuxVel[i];
		Colors[i] = AuxColors[i];
	}

	

	memoryBarrierShared();

}
